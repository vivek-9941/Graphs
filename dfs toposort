void dfs(vector<vector<int>>& adj, stack<int>& st, int node, vector<int>& vis) {
    vis[node] = 1;
    for (auto it : adj[node]) {
        if (!vis[it]) {
            dfs(adj, st, it, vis);
        }
    }
    st.push(node);
}

// Function to return a list containing vertices in Topological order.
vector<int> topologicalSort(vector<vector<int>>& adj) {
    int n = adj.size();
    stack<int> st;
    vector<int> vis(n, 0);

    for (int i = 0; i < n; i++) {
        if (!vis[i]) {
            dfs(adj, st, i, vis);
        }
    }

    vector<int> ans;
    while (!st.empty()) {
        ans.push_back(st.top());
        st.pop();
    }

    return ans;  // Return the topologically sorted list
}
